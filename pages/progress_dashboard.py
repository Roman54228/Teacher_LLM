"""
Progress Dashboard for Interview Prep
Enhanced with beautiful visualizations and AI recommendations
"""
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from utils.db_progress_tracker import DatabaseProgressTracker
from utils.yandex_gpt_helper import get_personalized_recommendations


def show_progress_dashboard():
    """
    Display comprehensive progress dashboard
    """
    progress_tracker = DatabaseProgressTracker()
    
    # Check if user has any progress
    total_answered = progress_tracker.get_total_questions_answered()
    
    if total_answered == 0:
        show_empty_dashboard()
        return
    
    # Header with gradient design
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #34C759 0%, #30D158 100%);
        padding: 30px;
        border-radius: 20px;
        text-align: center;
        color: white;
        margin-bottom: 30px;
    ">
        <h1 style="margin: 0; font-size: 32px; font-weight: 700;">üìà Progress Dashboard</h1>
        <p style="margin: 10px 0 0 0; font-size: 18px; opacity: 0.9;">–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Overview metrics
    show_overview_metrics()
    
    # Performance charts
    show_performance_charts()
    
    # Detailed analysis
    show_detailed_analysis()
    
    # AI recommendations
    show_ai_recommendations()


def show_empty_dashboard():
    """
    Show dashboard for users with no progress
    """
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #007AFF 0%, #0056cc 100%);
        padding: 40px;
        border-radius: 20px;
        text-align: center;
        color: white;
        margin: 30px 0;
    ">
        <div style="font-size: 60px; margin-bottom: 20px;">üéØ</div>
        <h1 style="margin: 0; font-size: 28px;">–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ!</h1>
        <p style="margin: 15px 0; font-size: 16px; opacity: 0.9;">
            –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–¥–µ—Å—å
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary", use_container_width=True):
        st.switch_page("pages/skill_assessment.py")


def show_overview_metrics():
    """
    Display overview metrics in an organized layout
    """
    progress_tracker = DatabaseProgressTracker()
    
    # Get overall statistics
    overall_score = progress_tracker.get_overall_score()
    total_answered = progress_tracker.get_total_questions_answered()
    
    # Determine overall level
    if overall_score >= 85:
        level = "Senior"
        level_emoji = "üèÜ"
        level_color = "#34C759"
    elif overall_score >= 70:
        level = "Middle"
        level_emoji = "ü•à"
        level_color = "#FFD60A"
    elif overall_score >= 40:
        level = "Junior"
        level_emoji = "ü•â"
        level_color = "#007AFF"
    else:
        level = "Beginner"
        level_emoji = "üìö"
        level_color = "#FF9500"
    
    # Display metrics in cards
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div style="
            background: white;
            border-radius: 16px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            border-left: 4px solid {level_color};
        ">
            <div style="font-size: 40px; margin-bottom: 10px;">{level_emoji}</div>
            <div style="font-size: 18px; font-weight: 600; color: #1d1d1f;">–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å</div>
            <div style="font-size: 24px; font-weight: 700; color: {level_color}; margin-top: 5px;">{level}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="
            background: white;
            border-radius: 16px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            border-left: 4px solid #007AFF;
        ">
            <div style="font-size: 40px; margin-bottom: 10px;">üìä</div>
            <div style="font-size: 18px; font-weight: 600; color: #1d1d1f;">–û–±—â–∏–π –±–∞–ª–ª</div>
            <div style="font-size: 24px; font-weight: 700; color: #007AFF; margin-top: 5px;">{overall_score:.1f}%</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="
            background: white;
            border-radius: 16px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            border-left: 4px solid #34C759;
        ">
            <div style="font-size: 40px; margin-bottom: 10px;">‚úÖ</div>
            <div style="font-size: 18px; font-weight: 600; color: #1d1d1f;">–û—Ç–≤–µ—á–µ–Ω–æ</div>
            <div style="font-size: 24px; font-weight: 700; color: #34C759; margin-top: 5px;">{total_answered}</div>
        </div>
        """, unsafe_allow_html=True)


def show_performance_charts():
    """
    Display performance charts and visualizations
    """
    st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    progress_tracker = DatabaseProgressTracker()
    categories = progress_tracker.get_all_categories()
    
    if not categories:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # Prepare data for charts
    category_data = []
    for category in categories:
        stats = progress_tracker.get_category_stats(category)
        category_data.append({
            'Category': category,
            'Score': stats.get('score', 0),
            'Answered': stats.get('answered', 0),
            'Total': stats.get('total', 0)
        })
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Scores by category
        if category_data:
            scores_fig = px.bar(
                category_data,
                x='Category',
                y='Score',
                title='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                color='Score',
                color_continuous_scale='Viridis'
            )
            scores_fig.update_layout(
                xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                yaxis_title="–ë–∞–ª–ª (%)",
                showlegend=False
            )
            st.plotly_chart(scores_fig, use_container_width=True)
    
    with col2:
        # Progress by category (pie chart)
        if category_data:
            progress_fig = px.pie(
                category_data,
                values='Answered',
                names='Category',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
            )
            st.plotly_chart(progress_fig, use_container_width=True)


def show_detailed_analysis():
    """
    Show detailed performance analysis
    """
    st.markdown("### üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    progress_tracker = DatabaseProgressTracker()
    
    # Get weak and strong areas
    weak_areas = progress_tracker.get_weak_areas(threshold=60.0)
    strong_areas = progress_tracker.get_strong_areas(threshold=80.0)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
        if strong_areas:
            for area in strong_areas:
                stats = progress_tracker.get_category_stats(area)
                st.markdown(f"""
                <div style="
                    background: #e8f5e8;
                    border-left: 4px solid #34C759;
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 8px;
                ">
                    <strong>{area}</strong><br>
                    <span style="color: #34C759;">‚úÖ {stats.get('score', 0):.1f}%</span>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω")
    
    with col2:
        st.markdown("#### üéØ –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        if weak_areas:
            for area in weak_areas:
                stats = progress_tracker.get_category_stats(area)
                st.markdown(f"""
                <div style="
                    background: #fff3e0;
                    border-left: 4px solid #FF9500;
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 8px;
                ">
                    <strong>{area}</strong><br>
                    <span style="color: #FF9500;">üìà {stats.get('score', 0):.1f}%</span>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.success("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")


def show_ai_recommendations():
    """
    Show AI-powered personalized recommendations
    """
    st.markdown("### ü§ñ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    progress_tracker = DatabaseProgressTracker()
    
    # Get user progress data
    user_progress = progress_tracker.get_category_progress_summary()
    weak_areas = progress_tracker.get_weak_areas()
    
    try:
        # Get AI recommendations
        recommendations = get_personalized_recommendations(user_progress, weak_areas)
        
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #AF52DE 0%, #BF5AF2 100%);
            padding: 25px;
            border-radius: 16px;
            color: white;
            margin: 20px 0;
        ">
            <h4 style="margin: 0 0 15px 0;">üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
            <div style="font-size: 16px; line-height: 1.6;">
                {recommendations}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.warning("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # Show fallback recommendations
        fallback_recommendations = [
            "üìö –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã Python –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "ü§ñ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "üí¨ –£–≥–ª—É–±–∏—Ç–µ—Å—å –≤ –∏–∑—É—á–µ–Ω–∏–µ NLP —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "üëÅÔ∏è –ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        ]
        
        for rec in fallback_recommendations:
            st.markdown(f"- {rec}")


def export_progress_report():
    """
    Export progress as a downloadable report
    """
    progress_tracker = DatabaseProgressTracker()
    
    # Generate report data
    report_data = {
        'overall_score': progress_tracker.get_overall_score(),
        'total_answered': progress_tracker.get_total_questions_answered(),
        'categories': progress_tracker.get_category_progress_summary(),
        'recent_performance': progress_tracker.get_recent_performance()
    }
    
    return report_data