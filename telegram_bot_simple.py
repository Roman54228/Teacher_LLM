#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è Interview Prep Mini App
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import requests
import json
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from config_loader import config

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = config.get('telegram.bot_token')
WEB_APP_URL = config.get('telegram.web_app_url', 'http://localhost:5000')

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def handle_start_command(chat_id, user_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = f"""üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Interview Prep Bot!**

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º.

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ Python, ML, NLP –∏ Computer Vision
‚Ä¢ –ò–ò-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ 
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –±–∞–ª–ª–∞–º:**
ü•â Junior (0-59%)
ü•à Middle (60-79%) 
üèÜ Senior (80%+)

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = {
        'inline_keyboard': [
            [{
                'text': 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É',
                'web_app': {'url': WEB_APP_URL}
            }],
            [{'text': '‚ÑπÔ∏è –û –±–æ—Ç–µ', 'callback_data': 'about'}],
            [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'stats'}]
        ]
    }
    
    send_message(chat_id, welcome_text, keyboard)

def handle_callback(chat_id, message_id, callback_data, user_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
    if callback_data == 'about':
        about_text = """‚ÑπÔ∏è **–û Interview Prep Bot**

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT.

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ YandexGPT –¥–ª—è –ò–ò-–æ–±—ä—è—Å–Ω–µ–Ω–∏–π
‚Ä¢ SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ Telegram Mini Apps –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:**
üêç Python - –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
ü§ñ Machine Learning - –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –º–µ—Ç—Ä–∏–∫–∏
üí¨ NLP - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –º–æ–¥–µ–ª–∏
üëÅÔ∏è Computer Vision - CNN, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        
        keyboard = {
            'inline_keyboard': [
                [{'text': '‚Üê –ù–∞–∑–∞–¥', 'callback_data': 'back'}]
            ]
        }
        edit_message(chat_id, message_id, about_text, keyboard)
        
    elif callback_data == 'stats':
        stats_text = """üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

**–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1,000+
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: 100+
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: 4"""
        
        keyboard = {
            'inline_keyboard': [
                [{
                    'text': 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    'web_app': {'url': WEB_APP_URL}
                }],
                [{'text': '‚Üê –ù–∞–∑–∞–¥', 'callback_data': 'back'}]
            ]
        }
        edit_message(chat_id, message_id, stats_text, keyboard)
        
    elif callback_data == 'back':
        handle_start_command(chat_id, user_name)

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def get_updates(offset=0):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    params = {'offset': offset, 'timeout': 30}
    
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    if not BOT_TOKEN or BOT_TOKEN == "your_telegram_bot_token_here":
        print("‚ùå –û—à–∏–±–∫–∞: Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather –≤ Telegram")
        print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ config.yaml ‚Üí telegram.bot_token")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
    print(f"üîó Web App URL: {WEB_APP_URL}")
    print("‚úì Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram")
    print("‚õî –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    offset = 0
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = get_updates(offset)
            
            if not updates or not updates.get('ok'):
                time.sleep(1)
                continue
                
            for update in updates.get('result', []):
                offset = update['update_id'] + 1
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                if 'message' in update:
                    message = update['message']
                    chat_id = message['chat']['id']
                    user_name = message['from'].get('first_name', '–î—Ä—É–≥')
                    text = message.get('text', '')
                    
                    if text == '/start':
                        handle_start_command(chat_id, user_name)
                    elif text == '/help':
                        handle_start_command(chat_id, user_name)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
                elif 'callback_query' in update:
                    callback = update['callback_query']
                    chat_id = callback['message']['chat']['id']
                    message_id = callback['message']['message_id']
                    callback_data = callback['data']
                    user_name = callback['from'].get('first_name', '–î—Ä—É–≥')
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
                    answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                    requests.post(answer_url, data={'callback_query_id': callback['id']})
                    
                    handle_callback(chat_id, message_id, callback_data, user_name)
                    
        except KeyboardInterrupt:
            print("\n‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == '__main__':
    main()