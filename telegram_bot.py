import os
import logging
import sys

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from config_loader import config

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
    TELEGRAM_AVAILABLE = False

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration from config.yaml
BOT_TOKEN = config.get('telegram.bot_token')
WEB_APP_URL = config.get('telegram.web_app_url', 'http://localhost:5000')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    
    # Create Web App button
    keyboard = [
        [InlineKeyboardButton(
            "üéØ –ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Interview Prep Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º.

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ Python, ML, NLP –∏ Computer Vision
‚Ä¢ –ò–ò-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ 
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è

**–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –±–∞–ª–ª–∞–º:**
ü•â Junior (0-59%)
ü•à Middle (60-79%) 
üèÜ Senior (80%+)

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'about':
        about_text = """
‚ÑπÔ∏è **–û Interview Prep Bot**

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT.

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ YandexGPT –¥–ª—è –ò–ò-–æ–±—ä—è—Å–Ω–µ–Ω–∏–π
‚Ä¢ PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ Telegram Mini Apps –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:**
üêç Python - –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
ü§ñ Machine Learning - –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –º–µ—Ç—Ä–∏–∫–∏
üí¨ NLP - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –º–æ–¥–µ–ª–∏
üëÅÔ∏è Computer Vision - CNN, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @your_username
**–í–µ—Ä—Å–∏—è:** 1.0
        """
        
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            about_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'stats':
        # Here you could fetch user stats from database
        stats_text = """
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

**–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1,000+
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: 100+
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: 4

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**
1. Python (45%)
2. Machine Learning (30%)
3. NLP (15%)
4. Computer Vision (10%)
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=WebAppInfo(url=WEB_APP_URL)
            )],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'back_to_main':
        # Return to main menu
        await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ Interview Prep Bot**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
3. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏–∑—É—á–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

**–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π:**
‚Ä¢ Junior (0-59%) - –∏–∑—É—á–∞–π –æ—Å–Ω–æ–≤—ã
‚Ä¢ Middle (60-79%) - —Ä–∞–∑–≤–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏  
‚Ä¢ Senior (80%+) - –≥–æ—Ç–æ–≤ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º!

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–ò-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ @your_support_username
    """
    
    keyboard = [[InlineKeyboardButton(
        "üéØ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", 
        web_app=WebAppInfo(url=WEB_APP_URL)
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Quick stats command."""
    user_id = update.effective_user.id
    
    # Here you would fetch real user stats from database
    quick_stats = """
üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üèÜ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: Junior
üìù –û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 0
üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0%
‚≠ê –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: -
üìö –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: -

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
    """
    
    keyboard = [[InlineKeyboardButton(
        "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
        web_app=WebAppInfo(url=WEB_APP_URL)
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        quick_stats,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def main() -> None:
    """Start the bot."""
    if not TELEGRAM_AVAILABLE:
        print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
        return
        
    if not BOT_TOKEN or BOT_TOKEN == "your_telegram_bot_token_here":
        print("‚ùå –û—à–∏–±–∫–∞: Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather –≤ Telegram")
        print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ config.yaml ‚Üí telegram.bot_token") 
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return
        
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üîó Web App URL: {WEB_APP_URL}")
    
    try:
        # Create the Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # Run the bot
        print("‚úì Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == '__main__':
    main()